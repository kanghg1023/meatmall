<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.board">

<!--글목록전체보기+페이징 관리자용-->
	<select id="boardlist" resultType="boardDto" parameterType="String">
		SELECT B.BOARD_NUM
			 , B.USER_NUM
			 , B.BOARD_TITLE
			 , B.BOARD_CONTENT
			 , B.BOARD_REGDATE
			 , B.BOARD_READCOUNT
			 , B.BOARD_NOTICE
			 , B.BOARD_DELFLAG
			 , U.USER_NICK
		  FROM (
		         SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NUM DESC) AS RN
		              , BOARD_NUM
					  , USER_NUM
			 		  , BOARD_TITLE
			 		  , BOARD_CONTENT
			 		  , BOARD_REGDATE
					  , BOARD_READCOUNT
			 		  , BOARD_NOTICE
			 		  , BOARD_DELFLAG
		           FROM BOARD
		       ) B
		     , USER_INFO U
		 WHERE B.USER_NUM = U.USER_NUM
		   AND CEIL(B.RN/5) = #{pnum}
		 ORDER BY BOARD_NUM DESC
	</select>

<!--글목록전체보기+페이징 전체이용자-->
	<select id="boardlistpage" resultType="boardDto" parameterType="String">
		SELECT B.BOARD_NUM
			 , B.USER_NUM
			 , B.BOARD_TITLE
			 , B.BOARD_CONTENT
			 , B.BOARD_REGDATE
			 , B.BOARD_READCOUNT
			 , B.BOARD_NOTICE
			 , B.BOARD_DELFLAG
			 , U.USER_NICK
		  FROM (
		         SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NUM DESC) AS RN
		              , BOARD_NUM
					  , USER_NUM
			 		  , BOARD_TITLE
			 		  , BOARD_CONTENT
			 		  , BOARD_REGDATE
					  , BOARD_READCOUNT
			 		  , BOARD_NOTICE
			 		  , BOARD_DELFLAG
		           FROM BOARD
		          WHERE BOARD_DELFLAG = 1
		       ) B
		     , USER_INFO U
		 WHERE B.USER_NUM = U.USER_NUM
		   AND CEIL(B.RN/5) = #{pnum}
	</select>
	
<!-- 글추가하기-->	
	<insert id="insertboard" parameterType="boardDto">
		INSERT INTO BOARD
	    VALUES (
				 BOARD_SEQ.NEXTVAL
			   , #{user_num}
			   , #{board_title}
			   , #{board_content}
			   , SYSDATE
			   , 0
			   , #{board_notice}
			   , 1
	    	   )
	</insert>

<!-- 글상세보기-->	
	<select id="getboard" resultType="boardDto">
		SELECT B.BOARD_NUM
			 , B.USER_NUM
			 , B.BOARD_TITLE
			 , B.BOARD_CONTENT
			 , B.BOARD_REGDATE
			 , B.BOARD_READCOUNT
			 , B.BOARD_NOTICE
			 , B.BOARD_DELFLAG
			 , U.USER_NICK
		  FROM BOARD B
			 , USER_INFO U
		 WHERE B.USER_NUM = U.USER_NUM
		   AND BOARD_NUM = #{board_num}
	</select>

<!-- 글수정하기-->	
	<update id="updateboard" parameterType="boardDto">
		UPDATE BOARD
  		   SET BOARD_TITLE = #{board_title}
     		 , BOARD_CONTENT = #{board_content}
     		 , BOARD_REGDATE = SYSDATE
 		 WHERE BOARD_NUM = #{board_num}
	</update>

<!-- 글삭제하기-->
	<update id="delboard" parameterType="int">
		UPDATE BOARD
		   SET BOARD_DELFLAG = 0
		 WHERE BOARD_NUM = #{board_num}
	</update>
	
<!-- 조회수-->	
	<update id="readcount" parameterType="int">
		UPDATE BOARD
  		   SET BOARD_READCOUNT = BOARD_READCOUNT+1 
		 WHERE BOARD_NUM = #{board_num}
	</update>

<!-- 공지3개 출력하기-->	
	<select id="noticelist" resultType="boardDto">
		<![CDATA[
		SELECT B.RN
			 , B.BOARD_NUM
		     , B.USER_NUM
		     , B.BOARD_TITLE
		     , B.BOARD_CONTENT
		     , B.BOARD_REGDATE
		     , B.BOARD_READCOUNT
		     , B.BOARD_NOTICE
		     , B.BOARD_DELFLAG
		     , U.USER_NICK
		  FROM (
		         SELECT ROW_NUMBER() OVER (ORDER BY BOARD_REGDATE DESC) AS RN
		  	          , BOARD_NUM
			          , USER_NUM
			          , BOARD_TITLE
			          , BOARD_CONTENT
			          , BOARD_REGDATE
			          , BOARD_READCOUNT
			          , BOARD_NOTICE
			          , BOARD_DELFLAG
		           FROM BOARD
		          WHERE BOARD_NOTICE = 1
		            AND BOARD_DELFLAG = 1
		       ) B
		     , USER_INFO U
		 WHERE B.USER_NUM = U.USER_NUM
		   AND B.RN < 4
         ]]>
    </select>
    
<!--  페이지 개수 구하기 관리자-->         
	<select id="pcount" resultType="int">
		SELECT CEIL(COUNT(BOARD_NUM)/5)
		  FROM BOARD
	</select>
	
<!--  페이지 개수 구하기 일반사용자-->         
	<select id="pcount2" resultType="int">
		SELECT CEIL(COUNT(BOARD_NUM)/5)
		  FROM BOARD
		 WHERE BOARD_DELFLAG = 1
	</select>	
		
<!--  유저넘버 받아서 닉네임으로 변경-->	
	<select id="numNick" parameterType="int" resultType="String">
		SELECT USER_NICK  
		  FROM USER_INFO 
		 WHERE USER_NUM = #{user_num}
	</select>
		
<!--  좋아요 출력 -->
	<select id="getLike" parameterType="Board_likeDto" resultType="Board_likeDto">
		SELECT BOARD_NUM 
		  FROM BOARD_LIKE
		 WHERE BOARD_NUM = #{board_num}
		   AND USER_NUM = #{user_num}
	</select>
	
<!--  좋아요 개수 -->	
	<select id="likeCount" parameterType="int" resultType="int">
		SELECT COUNT(BOARD_NUM) 
		  FROM BOARD_LIKE 
		 WHERE BOARD_NUM = #{board_num}
	</select>
	
<!--  좋아요 추가 -->
	<insert id="insertLike" parameterType="Board_likeDto">
		INSERT INTO BOARD_LIKE 
		VALUES (
				 #{board_num}
			   , #{user_num}
			   )
	</insert>	
	
<!--  좋아요 삭제 -->
	<delete id="deleteLike" parameterType="Board_likeDto">
		DELETE
		  FROM BOARD_LIKE 
		 WHERE BOARD_NUM = #{board_num} 
		   AND USER_NUM = #{user_num}
	</delete>
	
<!-- 댓글 목록 -->	
	<select id="commentList" parameterType="int" resultType="CommentDto">
		SELECT CO.COMMENT_NUM
	 		 , CO.BOARD_NUM
  	 		 , CO.USER_NUM
	 		 , CO.COMMENT_CONTENT
 			 , CO.COMMENT_REGDATE
 	 		 , CO.COMMENT_REFER
	 		 , CO.COMMENT_RE_CHECK
	 		 , CO.COMMENT_DELFLAG
	 		 , U.USER_NICK
  		  FROM BOARD_COMMENT CO
  		 	 , USER_INFO U
 		 WHERE CO.USER_NUM = U.USER_NUM
 		   AND BOARD_NUM = #{board_num}
 		 ORDER BY CO.COMMENT_REFER
 			 , CO.COMMENT_NUM
	</select>
	
<!-- 모댓글 달기 -->
	<insert id="addcomment" parameterType="CommentDto">
		INSERT INTO BOARD_COMMENT
		VALUES (
				 BOARD_COMMENT_SEQ.NEXTVAL
			   , #{board_num}
			   , #{user_num}
			   , #{comment_content}
			   , SYSDATE
			   , (
				   SELECT NVL(MAX(COMMENT_REFER)+1,0)
				     FROM BOARD_COMMENT
				 )
			   , 0
			   , 1	 		
			   )
	</insert>	

<!-- 대댓글 달기 -->
	<insert id="recomment" parameterType="CommentDto">
		INSERT INTO BOARD_COMMENT
		VALUES (
				 BOARD_COMMENT_SEQ.NEXTVAL
			   , #{board_num}
			   , #{user_num}
			   , #{comment_content}
			   , SYSDATE
			   , (
				   SELECT COMMENT_REFER
				     FROM BOARD_COMMENT
				    WHERE COMMENT_NUM = #{comment_num}
				 )
			   , 1
			   , 1
			   )
	</insert>
	
<!-- 댓글 삭제 -->
	<update id="delcomment" parameterType="int">
		UPDATE BOARD_COMMENT 
		   SET COMMENT_DELFLAG='0' 
		 WHERE COMMENT_NUM = #{comment_num} 		
	</update>
	
<!-- 댓글수정하기-->	
	<update id="updatecomment" parameterType="CommentDto">
		UPDATE BOARD_COMMENT
  		   SET COMMENT_CONTENT = #{comment_content}
     		 , COMMENT_REGDATE = SYSDATE
 		 WHERE COMMENT_NUM = #{comment_num}
	</update>	
	
<!-- 쪽지 페이징 -->
	<sql id="msgPaging">
		SELECT CEIL(COUNT(*)/20)
		  FROM MESSAGE
	</sql>
		
	<sql id="message">
		SELECT MESSAGE_NUM
			 , MESSAGE_FROM_NUM
			 , USER_NUM
			 , MESSAGE_CONTENT
			 , MESSAGE_REGDATE
		  FROM MESSAGE
	</sql>
	
	<select id="msgPcount" parameterType="int" resultType="int">
		<include refid="msgPaging" />
		 WHERE USER_NUM = #{user_num}
		   AND MESSAGE_TO_DELFLAG = 1
	</select>
	
	<select id="sendMsgPcount" parameterType="int" resultType="int">
		<include refid="msgPaging" />
		 WHERE MESSAGE_FROM_NUM = #{message_from_num}
		   AND MESSAGE_FROM_DELFLAG = 1
	</select>
	
	<select id="messageList" parameterType="Map" resultType="MessageDto">
		SELECT M.MESSAGE_NUM
			 , M.MESSAGE_FROM_NUM
			 , M.USER_NUM
			 , M.MESSAGE_CONTENT
			 , M.MESSAGE_REGDATE
			 , U.USER_NICK
		  FROM (
		  		 SELECT ROW_NUMBER() OVER (ORDER BY MESSAGE_NUM DESC) AS RN
		  		 	  , MESSAGE_NUM
		  		 	  , MESSAGE_FROM_NUM
		  		 	  , USER_NUM
		  		 	  , MESSAGE_CONTENT
		  		 	  , MESSAGE_REGDATE
		  		   FROM MESSAGE
		  		  WHERE MESSAGE_TO_DELFLAG = 1
		  	   ) M
		 	 , USER_INFO U
		 WHERE M.MESSAGE_FROM_NUM = U.USER_NUM
		   AND M.USER_NUM = #{user_num}
		   AND CEIL(M.RN/20) = #{pnum}
	</select>
	
	<select id="sendMessageList" parameterType="Map" resultType="MessageDto">
		SELECT M.MESSAGE_NUM
			 , M.MESSAGE_FROM_NUM
			 , M.USER_NUM
			 , M.MESSAGE_CONTENT
			 , M.MESSAGE_REGDATE
			 , U.USER_NICK
		  FROM (
		  		 SELECT ROW_NUMBER() OVER (ORDER BY MESSAGE_NUM DESC) AS RN
		  		 	  , MESSAGE_NUM
		  		 	  , MESSAGE_FROM_NUM
		  		 	  , USER_NUM
		  		 	  , MESSAGE_CONTENT
		  		 	  , MESSAGE_REGDATE
		  		   FROM MESSAGE
		  		  WHERE MESSAGE_FROM_DELFLAG = 1
		  	   ) M
		 	 , USER_INFO U
		 WHERE M.USER_NUM = U.USER_NUM
		   AND M.MESSAGE_FROM_NUM = #{message_from_num}
		   AND CEIL(M.RN/20) = #{pnum}
	</select>
	
	<insert id="insertMessage" parameterType="MessageDto">
		INSERT INTO MESSAGE
		VALUES (
				 MESSAGE_SEQ.NEXTVAL
			   , #{message_from_num}
			   , #{user_num}
			   , #{message_content}
			   , SYSDATE
			   , 1
			   , 1
			   )
	</insert>
	
	<select id="messageDetail" parameterType="int" resultType="MessageDto">
		SELECT M.MESSAGE_NUM
			 , M.MESSAGE_FROM_NUM
			 , M.MESSAGE_CONTENT
			 , M.MESSAGE_REGDATE
			 , U.USER_NICK
		  FROM MESSAGE M
			 , USER_INFO U
		 WHERE M.MESSAGE_FROM_NUM = U.USER_NUM
		   AND MESSAGE_NUM = #{message_num}
	</select>
	
	<select id="messageDetail2" parameterType="int" resultType="MessageDto">
		SELECT M.MESSAGE_NUM
			 , M.USER_NUM
			 , M.MESSAGE_CONTENT
			 , M.MESSAGE_REGDATE
			 , U.USER_NICK
		  FROM MESSAGE M
			 , USER_INFO U
		 WHERE M.USER_NUM = U.USER_NUM
		   AND MESSAGE_NUM = #{message_num}
	</select>
	
<!-- 	받은쪽지 삭제 -->
	<update id="deleteMessage" parameterType="int">
		UPDATE MESSAGE
		   SET MESSAGE_TO_DELFLAG = 0
		 WHERE MESSAGE_NUM = #{message_num}
	</update>
	
<!-- 	보낸쪽지 삭제 -->
	<update id="deleteMessage2" parameterType="int">
		UPDATE MESSAGE
		   SET MESSAGE_FROM_DELFLAG = 0
		 WHERE MESSAGE_NUM = #{message_num}
	</update>

<!-- 내가 쓴 글 목록 -->
	<select id="myboardList" parameterType="Map" resultType="BoardDto">
		SELECT BOARD_NUM
			 , USER_NUM
			 , BOARD_TITLE
			 , BOARD_CONTENT
			 , BOARD_REGDATE
			 , BOARD_READCOUNT
			 , BOARD_NOTICE
			 , BOARD_DELFLAG
		  FROM (
		         SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NUM DESC) AS RN
		              , BOARD_NUM
					  , USER_NUM
			 		  , BOARD_TITLE
			 		  , BOARD_CONTENT
			 		  , BOARD_REGDATE
					  , BOARD_READCOUNT
			 		  , BOARD_NOTICE
			 		  , BOARD_DELFLAG
		           FROM BOARD
		          WHERE USER_NUM = #{user_num}
		            AND BOARD_DELFLAG = 1
		       )
		 WHERE CEIL(RN/5) = #{pnum}
	</select>

<!-- 내가 쓴 글 페이징 -->
	<select id="myboardPcount" parameterType="int" resultType="int">
		SELECT CEIL(COUNT(BOARD_NUM)/5)
		  FROM BOARD
		 WHERE USER_NUM = #{user_num}
		   AND BOARD_DELFLAG = 1
	</select>
	
<!-- 베스트 게시글 -->
	<select id="bestBoard" resultType="BoardDto">
		<![CDATA[
		SELECT B.BOARD_NUM
			 , B.BOARD_TITLE
			 , U.USER_NICK
			 , L.LIKECOUNT
		  FROM BOARD B
			 , USER_INFO U
			 , (
			     SELECT COUNT(BOARD_NUM) AS LIKECOUNT
					  , BOARD_NUM
					  , ROW_NUMBER() OVER (ORDER BY COUNT(BOARD_NUM) DESC) AS RN
				   FROM BOARD_LIKE
				  GROUP BY BOARD_NUM
				  ORDER BY RN
			   ) L
		 WHERE B.BOARD_NUM = L.BOARD_NUM
		   AND B.USER_NUM = U.USER_NUM
		   AND ROWNUM <= 5
		 ORDER BY L.RN
		 ]]>
	</select>

</mapper>